// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: proposer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CurieNodeProposer_GetBlock_FullMethodName               = "/curie.CurieNodeProposer/GetBlock"
	CurieNodeProposer_ProposeCurieBlockForOG_FullMethodName = "/curie.CurieNodeProposer/ProposeCurieBlockForOG"
	CurieNodeProposer_ProposeCurieBlockForNG_FullMethodName = "/curie.CurieNodeProposer/ProposeCurieBlockForNG"
	CurieNodeProposer_SendProposerPublicKey_FullMethodName  = "/curie.CurieNodeProposer/SendProposerPublicKey"
)

// CurieNodeProposerClient is the client API for CurieNodeProposer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurieNodeProposerClient interface {
	GetBlock(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CurieBlock, error)
	ProposeCurieBlockForOG(ctx context.Context, in *SignedCurieBlockForOG, opts ...grpc.CallOption) (*ProposeResponse, error)
	ProposeCurieBlockForNG(ctx context.Context, in *SignedCurieBlockForNG, opts ...grpc.CallOption) (*ProposeResponse, error)
	SendProposerPublicKey(ctx context.Context, in *ProposerPublicKeyRequest, opts ...grpc.CallOption) (*ProposeResponse, error)
}

type curieNodeProposerClient struct {
	cc grpc.ClientConnInterface
}

func NewCurieNodeProposerClient(cc grpc.ClientConnInterface) CurieNodeProposerClient {
	return &curieNodeProposerClient{cc}
}

func (c *curieNodeProposerClient) GetBlock(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CurieBlock, error) {
	out := new(CurieBlock)
	err := c.cc.Invoke(ctx, CurieNodeProposer_GetBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *curieNodeProposerClient) ProposeCurieBlockForOG(ctx context.Context, in *SignedCurieBlockForOG, opts ...grpc.CallOption) (*ProposeResponse, error) {
	out := new(ProposeResponse)
	err := c.cc.Invoke(ctx, CurieNodeProposer_ProposeCurieBlockForOG_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *curieNodeProposerClient) ProposeCurieBlockForNG(ctx context.Context, in *SignedCurieBlockForNG, opts ...grpc.CallOption) (*ProposeResponse, error) {
	out := new(ProposeResponse)
	err := c.cc.Invoke(ctx, CurieNodeProposer_ProposeCurieBlockForNG_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *curieNodeProposerClient) SendProposerPublicKey(ctx context.Context, in *ProposerPublicKeyRequest, opts ...grpc.CallOption) (*ProposeResponse, error) {
	out := new(ProposeResponse)
	err := c.cc.Invoke(ctx, CurieNodeProposer_SendProposerPublicKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurieNodeProposerServer is the server API for CurieNodeProposer service.
// All implementations should embed UnimplementedCurieNodeProposerServer
// for forward compatibility
type CurieNodeProposerServer interface {
	GetBlock(context.Context, *emptypb.Empty) (*CurieBlock, error)
	ProposeCurieBlockForOG(context.Context, *SignedCurieBlockForOG) (*ProposeResponse, error)
	ProposeCurieBlockForNG(context.Context, *SignedCurieBlockForNG) (*ProposeResponse, error)
	SendProposerPublicKey(context.Context, *ProposerPublicKeyRequest) (*ProposeResponse, error)
}

// UnimplementedCurieNodeProposerServer should be embedded to have forward compatible implementations.
type UnimplementedCurieNodeProposerServer struct {
}

func (UnimplementedCurieNodeProposerServer) GetBlock(context.Context, *emptypb.Empty) (*CurieBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedCurieNodeProposerServer) ProposeCurieBlockForOG(context.Context, *SignedCurieBlockForOG) (*ProposeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeCurieBlockForOG not implemented")
}
func (UnimplementedCurieNodeProposerServer) ProposeCurieBlockForNG(context.Context, *SignedCurieBlockForNG) (*ProposeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeCurieBlockForNG not implemented")
}
func (UnimplementedCurieNodeProposerServer) SendProposerPublicKey(context.Context, *ProposerPublicKeyRequest) (*ProposeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendProposerPublicKey not implemented")
}

// UnsafeCurieNodeProposerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurieNodeProposerServer will
// result in compilation errors.
type UnsafeCurieNodeProposerServer interface {
	mustEmbedUnimplementedCurieNodeProposerServer()
}

func RegisterCurieNodeProposerServer(s grpc.ServiceRegistrar, srv CurieNodeProposerServer) {
	s.RegisterService(&CurieNodeProposer_ServiceDesc, srv)
}

func _CurieNodeProposer_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurieNodeProposerServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurieNodeProposer_GetBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurieNodeProposerServer).GetBlock(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurieNodeProposer_ProposeCurieBlockForOG_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedCurieBlockForOG)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurieNodeProposerServer).ProposeCurieBlockForOG(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurieNodeProposer_ProposeCurieBlockForOG_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurieNodeProposerServer).ProposeCurieBlockForOG(ctx, req.(*SignedCurieBlockForOG))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurieNodeProposer_ProposeCurieBlockForNG_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedCurieBlockForNG)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurieNodeProposerServer).ProposeCurieBlockForNG(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurieNodeProposer_ProposeCurieBlockForNG_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurieNodeProposerServer).ProposeCurieBlockForNG(ctx, req.(*SignedCurieBlockForNG))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurieNodeProposer_SendProposerPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposerPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurieNodeProposerServer).SendProposerPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurieNodeProposer_SendProposerPublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurieNodeProposerServer).SendProposerPublicKey(ctx, req.(*ProposerPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CurieNodeProposer_ServiceDesc is the grpc.ServiceDesc for CurieNodeProposer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CurieNodeProposer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "curie.CurieNodeProposer",
	HandlerType: (*CurieNodeProposerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlock",
			Handler:    _CurieNodeProposer_GetBlock_Handler,
		},
		{
			MethodName: "ProposeCurieBlockForOG",
			Handler:    _CurieNodeProposer_ProposeCurieBlockForOG_Handler,
		},
		{
			MethodName: "ProposeCurieBlockForNG",
			Handler:    _CurieNodeProposer_ProposeCurieBlockForNG_Handler,
		},
		{
			MethodName: "SendProposerPublicKey",
			Handler:    _CurieNodeProposer_SendProposerPublicKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proposer.proto",
}
